import 'package:equatable/equatable.dart';
import '../../../../core/usecase/usecase_base.dart';
import '../../../../core/utils/typedef.dart';

/// A use case responsible for handling a specific task must be only one reponsability
/// according to **SPR** principle  
///
/// This class follows the **Clean Architecture** pattern, where
/// business logic is encapsulated in use cases. It delegates the
/// {{usecase_name.pascalCase}} process to the [IRepository].
///
/// ## Responsibilities
/// - Accepts [Params] containing the parameters of the usecase.
/// - Calls the [IRepository.methods].
/// - Returns a [ValidResponse] wrapped inside a [ResultFuture].
///
/// ## Example
/// ```dart
/// final usecase = {{usecase_name.pascalCase}}Usecase(authRepository);
/// final result = await usecase(const Params(
///   email: 'test@example.com',
///   password: 'securePassword123',
/// ));
///
/// result.fold(
///   (failure) => print('Login failed: ${failure.message}'),
///   (token) => print('Access token: ${token.value}'),
/// );
/// ```
class {{usecase_name.pascalCase}}Usecase extends UsecaseBaseWithParams<void, Params> {
  /// Creates a new instance of [{{usecase_name.pascalCase}}Usecase].
  ///
  /// Requires an [IRepository] to perform the actual call.
  const {{usecase_name.pascalCase}}Usecase(this._repository);

  final IRepository _repository; //! TODO: Replace [IRepository] by the real contract repository

  @override
  ResultFuture<Token> call(Params params) async { //! TODO: Replace [Token] by the real entity
  //  Example
    return await _repository.login(email: params.email, password: params.password); //! TODO: Replace [_repository.login] by the real method on repository
  }
}

/// Parameters required to execute the [{{usecase_name.pascalCase}}Usecase].
///
/// Encapsulates the fields. Extends [Equatable]
/// to support value comparison, which is useful in testing and state
/// management scenarios.
///
/// ## Example
/// ```dart
/// const params = Params(
///   email: 'test@example.com',
///   password: 'securePassword123',
/// );
/// ```
class Params extends Equatable {
  const Params({required this.email, required this.password});

  /// The user’s email address.
  final String email; //! TODO: Replace [email] field by your real field

  /// The user’s password.
  final String password; //! TODO: Replace [password] field by your real field

  @override
   List<Object?> get props => [email, password]; //! TODO: Replace [fields] by your real fields
}